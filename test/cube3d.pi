let angle = 0

// Vertices of the cube (x, y, z)
let verts = [
    [-20, -20, 0],
    [-20, 20, 0],
    [20, 20, 0], 
    [20, -20, 0],   
    [20, -20, -30],    
    [-20, -20, -30],
    [-20, 20, -30],    
    [20, 20, -30],   
    [20, 20, 0],    
]

let proj = [
    [1, 0, 0],
    [0, 1, 0],
  ];   



fun matmul(a, b) {
    let result = [];
    for (i in 0..len(a)) {     
        let sum = 0
        for (j in 0..len(b)) {         
            sum += a[i][j] * b[j]            
        }
        result += sum
    }
    return result;
}

fun norm(a) {
    a[0] = 64 + a[0]; // Shift x-coordinate
    a[1] = 64 - a[1]; // Shift y-coordinate    
    return a;
}

fun rotx(angle) {
    return [
        [1, 0, 0],
        [0, cos(angle), -sin(angle)],
        [0, sin(angle), cos(angle)]
    ]
}

fun roty(angle) {
    return [
        [cos(angle), 0, sin(angle)],
        [0, 1, 0],
        [-sin(angle), 0, cos(angle)]
    ]
}

fun rotz(angle) {
    return [
        [cos(angle), -sin(angle), 0],
        [sin(angle), cos(angle), 0],
        [0, 0, 1]
    ]
}


// Function to draw a line between two points
fun draw_line(x1, y1, x2, y2, color) {
    let dx = x2 - x1
    let dy = y2 - y1
    let y = 0
    for(x in x1..x2) {
        y = y1 + dy * (x - x1) / dx
        pixel(x, y, color)  
    }
}


let projected, rotated, res
while(true){
    sleep(100)
    clear()
    projected = []
    for(vert in verts) {
        rotated = matmul(rotx(angle), vert)
        rotated = matmul(roty(angle), rotated)
        rotated = matmul(rotz(angle), rotated)
        res = matmul(proj, rotated)        
        res = norm(res)
        projected += res      
        // pixel(res[0], res[1], 0)
    }    
    // println(projected)
    for(i in 0..len(verts)) 
        draw_line(projected[i][0], projected[i][1], projected[i+1][0], projected[i+1][1], 0)    
    angle -= 0.1    
    draw()        
}


