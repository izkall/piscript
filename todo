01-Map datatype ✅
02-arrow functions ✅
03-in the java implementation the generated bytecode to access collection elements is reversed!✅
04-operating on empty list give error ✅
05-operating on very large list litteral give error ✅
06-solve the problem with storing dynamic list of strings ✅
07-make sure to make the jumping address relative instead of being absolute  ✅
08-there is some problem with the *= and -= operation try to solve it! ✅
09- add a log function and an error function ✅
10- handle the case of NaN ✅
11- add other types for the # operation ✅
12- add <- operation ✅
13- prevent the parser from generating bytecode after the return statement
14- VM stack overflow when running game of life ✅
15- adding is_numeric field to list for optimization in the future use ✅
16- add garbage collection for the upvalues ✅
17- solve the issues when two functions have the same name and when one function calls other function defined after it ✅
18- add special values for numbers type (INF, NaN....) ✅
19- check out the && operation ✅
20-adding ... operation
21-adding multiple assingment feature [a, b] = [1, 2]
22-adding log functions (log, info, warning, error) ✅
23-make multiple assignment valied lhs operand for the "FOR" loop [for([key, val] in dic)....]
24-add dot product ✅
25-implement instanceof operator or [is]   ✅
26-adding cascating condition (0 < x < 10) ✅
27-infinit loop block execution (web app)  
28-make '(' and ')' optional in the parser ✅

