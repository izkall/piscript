// Sudoku puzzle input (0 represents empty cells)
// the solution doesn't work i need to revisit the code in the future
let puzzle = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9],
  ];
  
// let solution = [
//   [5, 3, 4, 6, 7, 8, 9, 1, 2],
//   [6, 7, 2, 1, 9, 5, 3, 4, 8],
//   [1, 9, 8, 3, 4, 2, 5, 6, 7],
//   [8, 5, 9, 7, 6, 1, 4, 2, 3],
//   [4, 2, 6, 8, 5, 3, 7, 9, 1],
//   [7, 1, 3, 9, 2, 4, 8, 5, 6],
//   [9, 6, 1, 5, 3, 7, 2, 8, 4],
//   [2, 8, 7, 4, 1, 9, 6, 3, 5],
//   [3, 4, 5, 2, 8, 6, 1, 7, 9]
// ];

// let puzzle = [
//     [5, 3, 0, 0, 7, 0, 0, 0, 2],
//     [6, 0, 0, 1, 9, 5, 0, 0, 0],
//     [0, 9, 0, 3, 4, 2, 5, 6, 7],
//     [8, 5, 9, 7, 6, 1, 4, 0, 3],
//     [4, 2, 6, 8, 5, 3, 7, 9, 1],
//     [7, 1, 3, 9, 2, 0, 0, 0, 6],
//     [9, 6, 1, 5, 3, 7, 2, 8, 0],
//     [2, 8, 7, 4, 1, 9, 0, 3, 5],
//     [0, 0, 0, 0, 8, 0, 0, 7, 9]
//   ];

// Solve the Sudoku puzzle using backtracking
fun solve_sudoku(){
    for (row in 0..9){
        for(col in 0..9){
            if(puzzle[row][col] == 0){
                for(num in 1..10){
                    if(is_valid(row, col, num)){
                        puzzle[row][col] = num;
                        if(solve_sudoku())
                            return true;
                        puzzle[row][col] = 0;
                    }
                }
                return false;
            }
            }
    }
    return true;
}

// Function to check if a value is valid in a specific cell
fun is_valid(row, col, value){
    // Check row and column constraints
    for(i in 0..9){
        if(puzzle[row][i] == value || puzzle[i][col] == value)
            return false;
    }

    // Check 3x3 box constraints
    let start_row = row - (row % 3);
    let start_col = col - (col % 3);
    for(i in 0..3){
        for(j in 0..3) {
            if(puzzle[start_row + i][start_col + j] == value)
                return false;
        }
    }
    // If all constraints pass, value is valid
    return true;
}

// Print the initial puzzle
for(row in 0..9){
    for(col in 0..9)
        print(puzzle[row][col] + " ");
    println();
}

println("--------------------------------------------");

// Solve the Sudoku puzzle
if(solve_sudoku()){
    // Print the solved puzzle
    for(row in 0..9){
        for(col in 0..9)
            print(puzzle[row][col] + " ");
        println();
    }
}
else
    println("No solution exists.");