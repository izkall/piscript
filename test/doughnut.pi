// author: Roland Brake
// desc:   3d spinning doughnut with shading
// script: PI-script
width = 128
height = 128
let A = 0.0, B = 0.0
let R1 = 15, R2 = 40, K2 = 100
K1 = width * K2 * 3 / (8 * (R1 + R2))

while (true) {
    let zBuffer = [-1000] * (width * height)

    for(theta in 0.0..6.28:0.25) {
        let sinTheta = sin(theta), cosTheta = cos(theta)

        for(phi in 0.0..6.28:0.08) {
            let sinPhi = sin(phi), cosPhi = cos(phi)

            let circleX = R2 + R1 * cosTheta, circleY = R1 * sinTheta

            // 3D rotation
            let x = circleX * (cos(B) * cosPhi + sin(A) * sin(B) * sinPhi)
                  - circleY * cos(A) * sin(B)
            let y = circleX * (cosPhi * sin(B) - cos(B) * sin(A) * sinPhi)
                  + circleY * cos(A) * cos(B)
            let z = K2 + cos(A) * circleX * sinPhi + circleY * sin(A)

            if (z > 0) {
                let ooz = 1.0 / z
                let xp = round(width / 2 + K1 * ooz * x), yp = round(height / 2 - K1 * ooz * y)

                if (xp >= 0 && xp < width && yp >= 0 && yp < height) {
                    let idx = xp + yp * width
                    if (ooz > zBuffer[idx]) {
                        // Shading calculation
                        let L = cosPhi * cosTheta * sin(B) - cosTheta * sinPhi * cos(B) - sinTheta * sin(A)
                              + cosPhi * cosTheta * cos(A) * sin(B) - sinTheta * cos(A)

                        // Map lighting to 16 colors (0-15)
                        let color = round((L + 1) * 7.5)  // L ranges from -1 to 1
                        color = max([0, min([15, color])])  // Clamp to 0-15

                        zBuffer[idx] = ooz
                        pixel(xp, yp, color)
                    }
                }
            }
        }
    }

    // Draw the frame
    draw()
    A += 0.04
    B += 0.08
    clear(0)
    sleep(30)
}

// author: Roland Brake
// desc:   3d spinning shaded doughnut (fixed lighting)
// script: PI-scriptlet
// width = 128
// height = 128
// let A = 0.0, B = 0.0
// let R1 = 15, R2 = 40, K2 = 100
// K1 = width * K2 * 3 / (8 * (R1 + R2))

// let shadeColors = [0, 5, 17, 1, 22, 13, 2, 14, 15, 30, 31, 10, 11, 12, 6, 7]

// while (true) {
//     let zBuffer = [-1000] * (width * height)    
    
//     for(theta in 0.0..6.28:0.25) {
//         let sinTheta = sin(theta), cosTheta = cos(theta)

//         for(phi in 0.0..6.28:0.08) {
//             let sinPhi = sin(phi), cosPhi = cos(phi)

//             // Base circle in object space
//             let circleX = R2 + R1 * cosTheta
//             let circleY = R1 * sinTheta

//             // Position in 3D space (rotated)
//             let x = circleX * (cos(B) * cosPhi + sin(A) * sin(B) * sinPhi) 
//                   - circleY * cos(A) * sin(B)
//             let y = circleX * (cosPhi * sin(B) - cos(B) * sin(A) * sinPhi) 
//                   + circleY * cos(A) * cos(B)
//             let z = K2 + cos(A) * circleX * sinPhi + circleY * sin(A)

//             // Surface normal in object space
//             let nx0 = cosPhi * cosTheta
//             let ny0 = sinPhi
//             let nz0 = -cosPhi * sinTheta

//             // Rotate normal just like the position
//             let nx = nx0 * (cos(B) * cosPhi + sin(A) * sin(B) * sinPhi) 
//                    - ny0 * cos(A) * sin(B)
//             let ny = nx0 * (cosPhi * sin(B) - cos(B) * sin(A) * sinPhi) 
//                    + ny0 * cos(A) * cos(B)
//             let nz = cos(A) * nx0 * sinPhi + ny0 * sin(A)

//             // Light direction (normalized)
//             let lx = 0
//             let ly = 1
//             let lz = -1
//             let lenL = sqrt(lx*lx + ly*ly + lz*lz)
//             lx /= lenL
//             ly /= lenL
//             lz /= lenL

//             // Dot product for brightness
//             let dot = nx * lx + ny * ly + nz * lz
//             let brightness = dot < 0 ? 0.05 : dot  // ensure full shape is visible
//             let shade = round(brightness * 15)
//             let color = shadeColors[shade]

//             if (z > 0) {
//                 let ooz = 1.0 / z
//                 let xp = round(width / 2 + K1 * ooz * x)
//                 let yp = round(height / 2 - K1 * ooz * y)

//                 if (xp >= 0 && xp < width && yp >= 0 && yp < height) {
//                     let idx = xp + yp * width
//                     if (ooz > zBuffer[idx]) {
//                         zBuffer[idx] = ooz
//                         pixel(xp, yp, color)
//                     }
//                 }
//             }
//         }
//     }

//     draw()
//     A += 0.04
//     B += 0.08
//     clear(0)
//     sleep(20)
// }

